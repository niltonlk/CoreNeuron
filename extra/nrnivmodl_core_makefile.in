#
# This makefile has the rules necessary for making the custom version of coreneuron
# executable called "special-core" from various mod files.
# Mod files are looked up in the cwd, unless MODS_PATH is set

# Mechanisms version are by default 0.0, but should be overriden

MECH_NAME =
MODS_PATH = .
OUTPUT = @CMAKE_HOST_SYSTEM_PROCESSOR@
DESTDIR =
NMODL_BINARY =
# Coreneuron dirs
bindir := $(ROOT)/bin
libdir := $(ROOT)/lib
incdir := $(ROOT)/include
datadir:= $(ROOT)/share/coreneuron
datadir_mod2c := $(ROOT)/share/mod2c

# Binary of MOD2C/NMODL depending on what was activated
ifeq (@nmodl_FOUND@, TRUE)
    nmodl_binary_path = $(if $(NMODL_BINARY),$(NMODL_BINARY), @CORENRN_NMODL_BINARY@)
else
    nmodl_binary_path = $(if $(NMODL_BINARY),$(NMODL_BINARY), $(bindir)/@nmodl_binary_name@)
endif

# Additional variables set in CMAKE usable here
# - @CORENRN_COMPILE_DEFS
# - @CORENRN_LINK_DEFS
LDFLAGS = $(LINKFLAGS) @CORENRN_LINK_DEFS@
CORENRNLIB_FLAGS = -L$(libdir) -lcoreneuron
CORENRNLIB_FLAGS += $(if @reportinglib_LIB_DIR@, -W$(subst ;, -W,l,-rpath,@reportinglib_LIB_DIR@),)
CORENRNLIB_FLAGS += $(if @sonatareport_LIB_DIR@, -W$(subst ;, -W,l,-rpath,@sonatareport_LIB_DIR@),)
OS_NAME := $(shell uname)
_cm =,

# We rebuild the include dirs since a lot of stuff changes place
INCLUDES = $(INCFLAGS) -I$(incdir) -I$(incdir)/coreneuron/utils/randoms
INCLUDES += $(if @MPI_C_INCLUDE_PATH@, -I$(subst ;, -I,@MPI_C_INCLUDE_PATH@),)
INCLUDES += $(if @reportinglib_INCLUDE_DIR@, -I$(subst ;, -I,@reportinglib_INCLUDE_DIR@),)

CC = @CMAKE_C_COMPILER@
CXX = @CMAKE_CXX_COMPILER@
CFLAGS = @BUILD_TYPE_C_FLAGS@ @CMAKE_C_FLAGS@
CXXFLAGS = @BUILD_TYPE_CXX_FLAGS@ @CMAKE_CXX_FLAGS@ @CXX14_STANDARD_COMPILE_OPTION@ @PGI_INLINE_FLAGS@

COMPILE = $(CC) $(CFLAGS) @CORENRN_COMPILE_DEFS@ $(INCLUDES)
CXXCOMPILE = $(CXX) $(CXXFLAGS) @CORENRN_COMPILE_DEFS@ $(INCLUDES)
CXX_LINK_EXE = $(CXX) $(CXXFLAGS) @CMAKE_EXE_LINKER_FLAGS@
CXX_LINK_SHARED = $(CXX) $(CXXFLAGS) @CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS@ @CMAKE_SHARED_LIBRARY_CXX_FLAGS@ @CMAKE_SHARED_LINKER_FLAGS@

ISPC = @CMAKE_ISPC_COMPILER@
ISPC_FLAGS = @CMAKE_ISPC_FLAGS@
ISPC_COMPILE = $(ISPC) $(ISPC_FLAGS) -I$(incdir)

ifeq (@nmodl_FOUND@, TRUE)
INCLUDES += -I@CORENRN_NMODL_INCLUDE@
ISPC_COMPILE += -I@CORENRN_NMODL_INCLUDE@
endif

# Variables used in the "ARTIFICIAL_CELL" detection
mod_c_srcs_path =
mod_ispc_srcs_path =
mod_c_srcs_names =
mod_ispc_srcs_names =
define check_file
	ifeq (@CORENRN_ENABLE_ISPC@, ON)
		ifeq ($(shell grep -q $(2) $(1); echo $$?), 0)
			mod_c_srcs_path += $(MODC_DIR)/$(notdir $(1))
			mod_c_srcs_names += $(notdir $(1))
		else
			mod_ispc_srcs_path += $(MODC_DIR)/$(notdir $(1))
			mod_ispc_srcs_names += $(notdir $(1))
		endif
	else
		mod_c_srcs_path += $(MODC_DIR)/$(notdir $(1))
		mod_c_srcs_names += $(notdir $(1))
	endif
endef

# File path config (internal)
MODC_DIR = $(OUTPUT)/corenrn/mod2c
OBJS_DIR = $(OUTPUT)/corenrn/build
mod_files = $(sort $(notdir $(wildcard $(MODS_PATH)/*.mod)))
mod_paths = $(sort $(wildcard $(MODS_PATH)/*.mod))
mod_names = $(mod_files:.mod=)
mod_all_cpp_files = $(addprefix $(MODC_DIR)/,$(addsuffix .cpp,$(mod_names)))
mod_c_objs = $(addprefix $(OBJS_DIR)/,$(addsuffix .o,$(basename $(mod_names)))) $(addprefix $(OBJS_DIR)/,$(addsuffix .o,$(basename $(filter %.cpp, $(OPTMODS_OUTPUTS)))))
mod_ispc_objs = $(addprefix $(OBJS_DIR)/,$(addsuffix .obj,$(basename $(mod_ispc_srcs_names)))) $(addprefix $(OBJS_DIR)/,$(addsuffix .obj,$(basename $(filter %.ispc, $(OPTMODS_OUTPUTS)))))

$(foreach ittxtfile, $(mod_paths), $(eval $(call check_file, $(ittxtfile), ARTIFICIAL_CELL)))

mod_c_files = $(patsubst %.mod,%.cpp,$(mod_c_srcs_path))
mod_ispc_files = $(patsubst %.mod,%.ispc,$(mod_ispc_srcs_path))
mod_ispc_c_files = $(patsubst %.mod,%.cpp,$(mod_ispc_srcs_path))

kinderiv_h = $(MODC_DIR)/_kinderiv.h
mod_func_o = $(OBJS_DIR)/_mod_func.o
mod_func_c = $(MODC_DIR)/_mod_func.cpp
dimplic_src= $(datadir)/dimplic.cpp
dimplic_c  = $(MODC_DIR)/_dimplic.cpp
dimplic_o  = $(OBJS_DIR)/_dimplic.o

special  = $(OUTPUT)/special-core
coremech_libname = corenrnmech$(if $(MECH_NAME),_$(MECH_NAME),)
ifeq (@COMPILE_LIBRARY_TYPE@, STATIC)
    library_suffix = @CMAKE_STATIC_LIBRARY_SUFFIX@
else
    library_suffix = @CMAKE_SHARED_LIBRARY_SUFFIX@
endif
coremech_lib = $(OUTPUT)/lib$(coremech_libname)$(library_suffix)

# If no DESTDIR (we are probably just building) we use $ORIGIN (@loader_path in OSX)
_ORIGIN := $(if $(filter Darwin,$(OS_NAME)),@loader_path,$$ORIGIN)
_SONAME := -Wl,$(if $(filter Darwin,$(OS_NAME)),-install_name${_cm}@rpath/,-soname${_cm})$(notdir ${coremech_lib})
DESTDIR_RPATH = $(if $(DESTDIR),$(DESTDIR)/lib,$(_ORIGIN))

C_RESET := \033[0m
C_GREEN := \033[32m

# ======== MAIN BUILD RULES ============

# Take the main and link with nrnmech.
# RPATH is set for DESTDIR_RPATH and coreneuron lib
$(special): $(coremech_lib)
	@printf " => $(C_GREEN)LINKING$(C_RESET) executable $(special)\n"
	$(CXX_LINK_EXE) $(INCFLAGS) -I $(incdir) $(datadir)/coreneuron.cpp -o $(special) \
	  -L $(OUTPUT) -l$(coremech_libname) $(CORENRNLIB_FLAGS) -Wl,-rpath,'$(DESTDIR_RPATH)' -Wl,-rpath,$(libdir) $(LDFLAGS)


$(coremech_lib): $(mod_func_o) $(dimplic_o) $(mod_c_objs) $(mod_ispc_objs) build_always
	@printf " => $(C_GREEN)LINKING$(C_RESET) library $(coremech_lib) Mod files: $(mod_files)\n"
	@rm -f ${coremech_lib}
	$(CXXCOMPILE) @CMAKE_CXX_COMPILE_OPTIONS_PIC@ -c -DADDITIONAL_MECHS $(datadir)/enginemech.cpp
	@if [ "@COMPILE_LIBRARY_TYPE@" = "SHARED" ]; then\
		$(CXX_LINK_SHARED) $(INCFLAGS) -I $(incdir) enginemech.o -o ${coremech_lib} ${_SONAME} \
			$(mod_func_o) $(dimplic_o) $(mod_c_objs) $(mod_ispc_objs) $(libdir)/libscopmath.a $(CORENRNLIB_FLAGS) -Wl,-rpath,$(libdir) $(LDFLAGS);\
	else\
		mkdir -p $(OBJS_DIR)/scopmath_obj && cd $(OBJS_DIR)/scopmath_obj && ar -x $(libdir)/libscopmath.a && cd -;\
		ar cq ${coremech_lib} enginemech.o $(mod_func_o) $(dimplic_o) $(OBJS_DIR)/scopmath_obj/*.o $(mod_c_objs) $(mod_ispc_objs);\
	fi
	(rm -f $(OUTPUT)/.libs/libcorenrnmech$(library_suffix) ; mkdir -p $(OUTPUT)/.libs ; ln -s ../../${coremech_lib} $(OUTPUT)/.libs/libcorenrnmech$(library_suffix))


# Generic build cpp->.o Need PIC for shared lib
$(OBJS_DIR)/%.o: $(MODC_DIR)/%.cpp $(kinderiv_h) | $(OBJS_DIR)
	@printf " -> $(C_GREEN)Compiling$(C_RESET) $<\n"
	$(CXXCOMPILE) @CMAKE_CXX_COMPILE_OPTIONS_PIC@ -c $< -o $@

# Generic build ispc->.obj Need PIC for shared lib
$(OBJS_DIR)/%.obj: $(MODC_DIR)/%.ispc | $(OBJS_DIR)
	@printf " -> $(C_GREEN)Compiling with ISPC$(C_RESET) $<\n"
	$(ISPC_COMPILE) @CMAKE_ISPC_COMPILE_OPTIONS_PIC@ $< -o $@

# Build ispc files with mod2c/nmodl
$(mod_ispc_files): $(MODC_DIR)/%.ispc: $(MODS_PATH)/%.mod | $(MODC_DIR)
	@printf " -> $(C_GREEN)MOD2C$(C_RESET) $<\n"
	PYTHONPATH=@CORENRN_NMODL_PYTHONPATH@:${libdir}/python \
	MODLUNIT=$(datadir_mod2c)/nrnunits.lib \
	  $(nmodl_binary_path) $< -o $(MODC_DIR)/ @nmodl_arguments_ispc@

# Static pattern to set up the dependencies for the previous recipe.
$(mod_ispc_c_files): $(MODC_DIR)/%.cpp: $(MODC_DIR)/%.ispc

# Build cpp files with mod2c/nmodl
$(mod_c_files): $(MODC_DIR)/%.cpp: $(MODS_PATH)/%.mod | $(MODC_DIR)
	@printf " -> $(C_GREEN)MOD2C$(C_RESET) $<\n"
	PYTHONPATH=@CORENRN_NMODL_PYTHONPATH@:${libdir}/python \
	MODLUNIT=$(datadir_mod2c)/nrnunits.lib \
	  $(nmodl_binary_path) $< -o $(MODC_DIR)/ @nmodl_arguments_c@

# If .mod doesnt exist attempt from previously built opt mods in shared/
$(MODC_DIR)/%.cpp: $(datadir_mod2c)/%.cpp | $(MODC_DIR)
	ln -s $< $@
$(MODC_DIR)/%.ispc: $(datadir_mod2c)/%.ispc | $(MODC_DIR)
	ln -s $< $@


# Mod registration. Compiled by generic rule. Dont overwrite if not changed
$(mod_func_c): build_always | $(MODC_DIR)
	@printf " -> $(C_GREEN)Generating$(C_RESET) $(mod_func_c)\n"
	perl $(datadir)/mod_func.c.pl $(mod_files) > $(mod_func_c).tmp
	diff -q $(mod_func_c).tmp $(mod_func_c) || { echo "Replacing mod_func.c"; mv $(mod_func_c).tmp $(mod_func_c); }


# Header to avoid function callbacks using function pointers
# Move all mods to temp and bring back only those required
$(kinderiv_h): $(mod_all_cpp_files) build_always | $(MODC_DIR)
	@printf " -> $(C_GREEN)Generating$(C_RESET) $(kinderiv_h)\n"
	cd $(MODC_DIR) && mkdir -p _tmp &&	mv [^_]*.cpp _tmp/ && \
	  mv $(addprefix _tmp/,$(notdir $(mod_all_cpp_files))) ./ || true
	rm -rf $(MODC_DIR)/_tmp
	cd $(MODC_DIR) && @PYTHON_EXECUTABLE@ $(datadir)/kinderiv.py


$(dimplic_c): $(dimplic_src) | $(MODC_DIR)
	ln -s $(dimplic_src) $(dimplic_c)


install: $(special) $(coremech_lib)
	install -d $(DESTDIR)/bin $(DESTDIR)/lib
	install $(coremech_lib) $(DESTDIR)/lib
	install $(special) $(DESTDIR)/bin


# == INIT ==
$(MODC_DIR):
	mkdir -p $(MODC_DIR)
$(OBJS_DIR):
	mkdir -p $(OBJS_DIR)

.PHONY: build_always

$(VERBOSE).SILENT:
